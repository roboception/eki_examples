&ACCESS RVP
&REL 6
&PARAM DISKPATH = KRC:\R1\Program\RC
DEF  MeasureAppAccuracy ( )

   ; Robot
   DECL REAL rLinVelocityStd, rLinVelocitySlow, rPTPVelocityStd, rPTPVelocitySlow
   
   ; Common
   DECL CHAR sModuleName[13]

   ; EKI
   DECL CHAR serviceName[50]
   DECL EKI_Status RET
   DECL KrlMsgPar_T par[3]
   DECL FRAME GraspPose
   DECL FRAME PreGraspPose
   DECL REAL preGraspOffsetZ ; in mm

   rLinVelocityStd = 0.15 ; m/s 
   rLinVelocitySlow = 0.05 ; m/s
   rPTPVelocityStd = 30 ; %  
   rPTPVelocitySlow = 1 ; %
   
   preGraspOffsetZ = 40 ;in mm

   ;FOLD INI;%{PE}
     ;FOLD BASISTECH INI
       GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
       INTERRUPT ON 3 
       BAS (#INITMOV,0 )
     ;ENDFOLD (BASISTECH INI)
     ;FOLD USER INI
       ;Make your modifications here
       $OV_PRO=10
     ;ENDFOLD (USER INI)
   ;ENDFOLD (INI)
     
   INTERRUPT DECL 89 WHEN $FLAG[998] DO RC_NOTIFYRECEIVED(1, 998)
   INTERRUPT ON 89
   
   ;FOLD SPTP HOME Vel=10 % DEFAULT ;%{PE}
      ;FOLD Parameters ;%{h}
         ;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=HOME; Kuka.BlendingEnabled=False; Kuka.MoveDataPtpName=DEFAULT; Kuka.VelocityPtp=10; Kuka.VelocityFieldEnabled=True; Kuka.ColDetectFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
      ;ENDFOLD
      SPTP XHOME WITH $VEL_AXIS[1] = SVEL_JOINT(rPTPVelocityStd), $TOOL = STOOL2(FHOME), $BASE = SBASE(FHOME.BASE_NO), $IPO_MODE = SIPO_MODE(FHOME.IPO_FRAME), $LOAD = SLOAD(FHOME.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PDEFAULT), $APO = SAPO_PTP(PDEFAULT), $GEAR_JERK[1] = SGEAR_JERK(PDEFAULT), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
   ;ENDFOLD
   
   serviceName[] = "rc_april_tag_detect-detect"
   RC_INIT(serviceName[])
   RC_OPENCONNECTION(serviceName[])
   
   RET = EKI_SetString(serviceName[], "req/args/pose_frame", "external")
   RET = EKI_Send(serviceName[], "req")
   
   RC_WAITFORRESULT(1)
   RC_READTAGRESULT(serviceName[])

   IF(RETURNCODE.VALUE < 0) THEN
      RC_SETMSG("Execution failed")
   ENDIF
   
   IF NUMDETECTEDITEMS == 2 THEN
      GraspPose.X = DETECTEDITEMS[1].X + ((DETECTEDITEMS[2].X - DETECTEDITEMS[1].X) / 2)
      GraspPose.Y = DETECTEDITEMS[1].Y + ((DETECTEDITEMS[2].Y - DETECTEDITEMS[1].Y) / 2)
      GraspPose.Z = DETECTEDITEMS[1].Z + ((DETECTEDITEMS[2].Z - DETECTEDITEMS[1].Z) / 2)
      GraspPose.A = DETECTEDITEMS[1].A
      GraspPose.B = DETECTEDITEMS[1].B
      GraspPose.C = DETECTEDITEMS[1].C
      
      PreGraspPose = GraspPose
      PreGraspPose.Z = PreGraspPose.Z + preGraspOffsetZ
      
      par[1] = {par_type #value, par_real 0}
      par[1].par_real = PreGraspPose.X
      par[2] = {par_type #value, par_real 0}
      par[2].par_real = PreGraspPose.Y
      par[3] = {par_type #value, par_real 0}
      par[3].par_real = PreGraspPose.Z
      
      RC_SETMSG_PARAM("Target position: X: %1, Y: %2, Z: %3", par[])
      
      par[1] = {par_type #value, par_real 0}
      par[1].par_real = PreGraspPose.A
      par[2] = {par_type #value, par_real 0}
      par[2].par_real = PreGraspPose.B
      par[3] = {par_type #value, par_real 0}
      par[3].par_real = PreGraspPose.C
      
      RC_SETMSG_PARAM("Target orientation: A: %1, B: %2, C: %3", par[])
      
      SPTP PreGraspPose WITH $VEL_AXIS[1] = SVEL_JOINT(rPTPVelocityStd), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO)
      
      SLIN GraspPose WITH $VEL = SVEL_CP(rLinVelocitySlow, , lDatDefault), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO)
      
      RC_SETMSG("Target position reached.")
      HALT
      
      SLIN PreGraspPose WITH $VEL = SVEL_CP(rLinVelocitySlow, , lDatDefault), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO)
      
   ELSE
      RC_SETMSG("Execution failed")
   ENDIF     

   RC_CLOSECONNECTION(serviceName[])
   
   ;FOLD SPTP HOME Vel=100 % DEFAULT ;%{PE}
   ;FOLD Parameters ;%{h}
   ;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=HOME; Kuka.BlendingEnabled=False; Kuka.MoveDataPtpName=DEFAULT; Kuka.VelocityPtp=100; Kuka.VelocityFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
   ;ENDFOLD
   SPTP XHOME WITH $VEL_AXIS[1] = SVEL_JOINT(rPTPVelocityStd), $TOOL = STOOL2(FHOME), $BASE = SBASE(FHOME.BASE_NO), $IPO_MODE = SIPO_MODE(FHOME.IPO_FRAME), $LOAD = SLOAD(FHOME.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PDEFAULT), $APO = SAPO_PTP(PDEFAULT), $GEAR_JERK[1] = SGEAR_JERK(PDEFAULT), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
   ;ENDFOLD

END


;FOLD RC_SETMSG
DEF RC_SETMSG(msg[]:IN)
  DECL CHAR msg[]
  DECL KrlMsgPar_T params[3]
  RC_SETMSG_PARAM(msg[], params[])
END
;ENDFOLD (RC_SETMSG)

;FOLD RC_SETMSG_PARAM
   DEF RC_SETMSG_PARAM(msg[]:IN, params:OUT)
      DECL CHAR msg[]
      DECL KrlMsgPar_T params[]

      DECL KrlMsg_T name
      DECL KrlMsgOpt_T options
      DECL INT Handle, len, count
      DECL EKrlMsgType Type

      name={modul[] "RC", nr 1, msg_txt[] " "}

      Type=#notify

      len=STRLEN(msg[])
      IF len>0 THEN
         IF len>80 THEN
            len=80
         ENDIF
         FOR count=1 TO len
            name.msg_txt[count]=msg[count]
         ENDFOR
      ELSE
         name.msg_txt[]="parameter msg[] is missing"
      ENDIF

      Handle=Set_KrlMsg(Type, name, params[], options)
   END
;ENDFOLD (RC_SETMSG_PARAM)

;FOLD RC_INIT
DEF RC_INIT(configFileName[]:IN)
  DECL CHAR configFileName[]
  DECL EKI_Status RET
  RET=EKI_INIT(configFileName[])
END
;ENDFOLD (RC_INIT)

;FOLD RC_OPENCONNECTION
DEF RC_OPENCONNECTION(configFileName[]:IN)
  DECL CHAR configFileName[]
  DECL EKI_Status RET
  RET=EKI_Open(configFileName[])
  EKI_CHECK(RET,#Quit)
END
;ENDFOLD (RC_OPENCONNECTION)

;FOLD RC_CLOSECONNECTION
DEF RC_CLOSECONNECTION(configFileName[]:IN)
  DECL CHAR configFileName[]
  DECL EKI_Status RET
  WAIT SEC 0
  RET=EKI_Close(configFileName[])
END
;ENDFOLD (RC_CLOSECONNECTION)

;FOLD RC_WAITFORRESULT
DEF RC_WAITFORRESULT(WaitFlag:IN)
  DECL INT WaitFlag

  WAIT FOR $FLAG[WaitFlag] OR NOT $FLAG[RCEkiAliveFlagNo]

  ;Eki-connection has been closed 
  IF(NOT $FLAG[RCEkiAliveFlagNo]) THEN
    RC_SETMSG("EKI connection lost")
  ENDIF

  $FLAG[WaitFlag] = FALSE
END
;ENDFOLD (RC_WAITFORRESULT)

;FOLD RC_NOTIFYRECEIVED
DEF RC_NOTIFYRECEIVED(WAITFLAG:IN, EOFRESULFLAG:IN)
  DECL INT WAITFLAG
  DECL INT EOFRESULFLAG
  $FLAG[EOFRESULFLAG]=FALSE
  $FLAG[WAITFLAG]=TRUE
END
;ENDFOLD (RC_NOTIFYRECEIVED)

;FOLD RC_READTAGRESULT
DEF RC_READTAGRESULT(configFileName[]:IN)
  DECL CHAR configFileName[]
  DECL CHAR tagId[80]
  DECL RETURNCODE_T RESULT
  DECL EKI_STATUS RET
  DECL INT j
  DECL FRAME POSE

  POSE = POSE_IDENT
  tagId[]="-"
  RESULT={VALUE 0, MSG[] "0"}

  RET = EKI_GetInt(configFileName[], "res/return_code/@value", RESULT.VALUE)
  RET = EKI_GetString(configFileName[], "res/return_code/@message", RESULT.MSG[])
  RETURNCODE = RESULT

  RET = EKI_CheckBuffer(configFileName[], "res/tags/le/instance_id")
  NUMDETECTEDITEMS = RET.Buff
  for j=1 to NUMDETECTEDITEMS
   
   RET = EKI_GetString(configFileName[], "res/tags/le/id", tagId[])
 
   IF STRCOMP(tagId[], "36h11_1", (#CASE_SENS)) THEN
      RET = EKI_GetFrame(configFileName[], "res/tags/le/pose", POSE)
      DETECTEDITEMS[1] = POSE
   ENDIF
   
   IF STRCOMP(tagId[], "36h11_0", (#CASE_SENS)) THEN
      RET = EKI_GetFrame(configFileName[], "res/tags/le/pose", POSE)
      DETECTEDITEMS[2] = POSE
   ENDIF    
    
  endfor

  RET = EKI_ClearBuffer(configFileName[], "res")
END
;ENDFOLD (RC_READTAGRESULT)
