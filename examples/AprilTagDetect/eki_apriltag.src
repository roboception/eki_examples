&ACCESS RVP
&REL 23
&PARAM EDITMASK = *
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
DEF eki_apriltag( )
DECL INT I
DECL CHAR serviceName[32]
DECL RETURNCODE_T RETURN_CODE
DECL EKI_Status RET
DECL CHAR PRINT_MSG[80]
DECL KrlMsgPar_T par[3]
DECL FRAME AprilPose
DECL FRAME CURRENTROBOTPOSITION

;FOLD INI;%{PE}
  ;FOLD BASISTECH INI
    GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
    INTERRUPT ON 3 
    BAS (#INITMOV,0 )
  ;ENDFOLD (BASISTECH INI)
  ;FOLD USER INI
    ;Make your modifications here

  ;ENDFOLD (USER INI)
;ENDFOLD (INI)

INTERRUPT DECL 89 WHEN $FLAG[998] DO RC_NOTIFYRECEIVED(1, 998)
INTERRUPT ON 89

;FOLD SPTP HOME Vel=100 % DEFAULT;%{PE}%MKUKATPBASIS,%CSPLINE,%VSPTP_SB,%P 1:SPTP_SB, 2:HOME, 3:, 5:100, 7:DEFAULT
SPTP XHOME WITH $VEL_AXIS[1]= SVEL_JOINT( 100), $TOOL= STOOL2( FHOME), $BASE= SBASE( FHOME.BASE_NO),$IPO_MODE= SIPO_MODE( FHOME.IPO_FRAME), $LOAD= SLOAD( FHOME.TOOL_NO), $ACC_AXIS[1]= SACC_JOINT( PDEFAULT), $GEAR_JERK[1]= SGEAR_JERK( PDEFAULT)
;ENDFOLD

$FLAG[1] = FALSE

RC_SETMSG("Start")

serviceName[] = "rc_april_tag_detect-detect"

RC_INIT(serviceName[])
RC_OPENCONNECTION(serviceName[])

RET = EKI_SetString(serviceName[], "req/args/pose_frame", "external")

CURRENTROBOTPOSITION.X = $POS_ACT.X
CURRENTROBOTPOSITION.Y = $POS_ACT.Y
CURRENTROBOTPOSITION.Z = $POS_ACT.Z
CURRENTROBOTPOSITION.A = $POS_ACT.A
CURRENTROBOTPOSITION.B = $POS_ACT.B
CURRENTROBOTPOSITION.C = $POS_ACT.C

RET = EKI_SetFrame(serviceName[], "req/args/robot_pose", CURRENTROBOTPOSITION)

RET = EKI_Send(serviceName[], "req")

RC_WAITFORRESULT(1)
RC_READRESULT(serviceName[])

IF(RETURNCODE.VALUE < 0) THEN
  RC_SETMSG("Execution failed")
ENDIF

for I=1 to NUMDETECTEDITEMS

  par[1] = {par_type #value, par_real 0}
  par[1].par_real = DETECTEDITEMS[I].X
  par[2] = {par_type #value, par_real 0}
  par[2].par_real = DETECTEDITEMS[I].Y
  par[3] = {par_type #value, par_real 0}
  par[3].par_real = DETECTEDITEMS[I].Z
  RC_SETMSG_PARAM("April Tag Pose: X: %1, Y: %2, Z: %3", par[])
  
  AprilPose=DETECTEDITEMS[I]
;FOLD SPTP P1 Vel=100 % PDAT1 Tool[2]:gripper Base[0] ;%{PE}
;FOLD Parameters ;%{h}
;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=P1; Kuka.BlendingEnabled=False; Kuka.MoveDataPtpName=PDAT1; Kuka.VelocityPtp=100; Kuka.VelocityFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
;ENDFOLD
SPTP AprilPose WITH $VEL_AXIS[1] = SVEL_JOINT(100.0), $TOOL = STOOL2(FP1), $BASE = SBASE(FP1.BASE_NO), $IPO_MODE = SIPO_MODE(FP1.IPO_FRAME), $LOAD = SLOAD(FP1.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PPDAT1), $APO = SAPO_PTP(PPDAT1), $GEAR_JERK[1] = SGEAR_JERK(PPDAT1), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
;ENDFOLD
  
endfor

RC_SETMSG("Finish")

;FOLD SPTP HOME Vel=100 % DEFAULT;%{PE}%MKUKATPBASIS,%CSPLINE,%VSPTP_SB,%P 1:SPTP_SB, 2:HOME, 3:, 5:100, 7:DEFAULT
SPTP XHOME WITH $VEL_AXIS[1]= SVEL_JOINT( 100), $TOOL= STOOL2( FHOME), $BASE= SBASE( FHOME.BASE_NO),$IPO_MODE= SIPO_MODE( FHOME.IPO_FRAME), $LOAD= SLOAD( FHOME.TOOL_NO), $ACC_AXIS[1]= SACC_JOINT( PDEFAULT), $GEAR_JERK[1]= SGEAR_JERK( PDEFAULT)
;ENDFOLD

END

;FOLD RC_SETMSG
DEF RC_SETMSG(msg[]:IN)
  DECL CHAR msg[]
  DECL KrlMsgPar_T params[3]
  RC_SETMSG_PARAM(msg[], params[])
END
;ENDFOLD (RC_SETMSG)

;FOLD RC_SETMSG_PARAM
   DEF RC_SETMSG_PARAM(msg[]:IN, params:OUT)
      DECL CHAR msg[]
      DECL KrlMsgPar_T params[]

      DECL KrlMsg_T name
      DECL KrlMsgOpt_T options
      DECL INT Handle, len, count
      DECL EKrlMsgType Type

      name={modul[] "RC", nr 1, msg_txt[] " "}

      Type=#notify

      len=STRLEN(msg[])
      IF len>0 THEN
         IF len>80 THEN
            len=80
         ENDIF
         FOR count=1 TO len
            name.msg_txt[count]=msg[count]
         ENDFOR
      ELSE
         name.msg_txt[]="parameter msg[] is missing"
      ENDIF

      Handle=Set_KrlMsg(Type, name, params[], options)
   END
;ENDFOLD (RC_SETMSG_PARAM)

;FOLD RC_INIT
DEF RC_INIT(configFileName[]:IN)
  DECL CHAR configFileName[]
  DECL EKI_Status RET
  RET=EKI_INIT(configFileName[])
END
;ENDFOLD (RC_INIT)

;FOLD RC_OPENCONNECTION
DEF RC_OPENCONNECTION(configFileName[]:IN)
  DECL CHAR configFileName[]
  DECL EKI_Status RET
  RET=EKI_Open(configFileName[])
  EKI_CHECK(RET,#Quit)
END
;ENDFOLD (RC_OPENCONNECTION)

;FOLD RC_CLOSECONNECTION
DEF RC_CLOSECONNECTION(configFileName[]:IN)
  DECL CHAR configFileName[]
  DECL EKI_Status RET
  WAIT SEC 0
  RET=EKI_Close(configFileName[])
END
;ENDFOLD (RC_CLOSECONNECTION)

;FOLD RC_WAITFORRESULT
DEF RC_WAITFORRESULT(WaitFlag:IN)
  DECL INT WaitFlag

  WAIT FOR $FLAG[WaitFlag] OR NOT $FLAG[RCEkiAliveFlagNo]

  ;Eki-connection has been closed 


  IF(NOT $FLAG[RCEkiAliveFlagNo]) THEN
    RC_SETMSG("EKI connection lost")
  ENDIF

  $FLAG[WaitFlag] = FALSE
END
;ENDFOLD (RC_WAITFORRESULT)

;FOLD RC_NOTIFYRECEIVED
DEF RC_NOTIFYRECEIVED(WAITFLAG:IN, EOFRESULFLAG:IN)
  DECL INT WAITFLAG
  DECL INT EOFRESULFLAG
  $FLAG[EOFRESULFLAG]=FALSE
  $FLAG[WAITFLAG]=TRUE
END
;ENDFOLD (RC_NOTIFYRECEIVED)

;FOLD RC_READRESULT
DEF RC_READRESULT(configFileName[]:IN)
  DECL CHAR configFileName[]
  DECL RETURNCODE_T RESULT
  DECL EKI_STATUS RET
  DECL INT j
  DECL FRAME POSE

  POSE = POSE_IDENT

  RESULT={VALUE 0, MSG[] "0"}

  RET = EKI_GetInt(configFileName[], "res/return_code/@value", RESULT.VALUE)
  RET = EKI_GetString(configFileName[], "res/return_code/@message", RESULT.MSG[])
  RETURNCODE = RESULT

  RET = EKI_CheckBuffer(configFileName[], "res/tags/le/id")
  NUMDETECTEDITEMS = RET.Buff
  for j=1 to NUMDETECTEDITEMS

    RET = EKI_GetFrame(configFileName[], "res/tags/le/pose", POSE)
    DETECTEDITEMS[j] = POSE

  endfor

  RET = EKI_ClearBuffer(configFileName[], "res")
END
;ENDFOLD (RC_READRESULT)

