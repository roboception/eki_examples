&ACCESS RVP
&REL 6
&PARAM DISKPATH = KRC:\R1\Program\RC\NewEkiExamples
DEF SystemAccuracyTest()
   ; SystemAccuracyTest
   ; -----------------
   ; Tests the system's positioning accuracy using AprilTag detection. The program:
   ; 1. Detects two AprilTags placed on a test sheet
   ; 2. Calculates the midpoint between the two tags
   ; 3. Moves the robot to this midpoint position
   ; 4. Allows measurement of positioning deviation from the expected target
   ; 5. Returns to home position after completion
   ;
   
   ; EKI
   DECL CHAR serviceName[64]
   DECL EKI_Status RET
   DECL KrlMsgPar_T par[3]
   DECL FRAME PointPose
   DECL FRAME PrePointPose
   DECL FRAME F_OFFSET
   DECL E6POS flangePose
   
   ;FOLD INI;%{PE}
      ;FOLD BASISTECH INI
         GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM()
         INTERRUPT ON 3 
         BAS (#INITMOV,0)
      ;ENDFOLD (BASISTECH INI)
      ;FOLD USER INI
         $OV_PRO=10
      ;ENDFOLD (USER INI)
   ;ENDFOLD (INI)
   
   INTERRUPT DECL 89 WHEN $FLAG[998] DO RC_NOTIFYRECEIVED(1, 998)
   INTERRUPT ON 89
   
   ; Initialize EKI connection
   serviceName[] = "new_lab_1_rc_april_tag_detect-detect"
   RC_INIT(serviceName[])
   RC_OPENCONNECTION(serviceName[])   
   
   LOOP
      ; Move to home position
      SPTP XHOME WITH $VEL_AXIS[1] = SVEL_JOINT(rPTPVelocityStd), $TOOL = STOOL2(FHOME), $BASE = SBASE(FHOME.BASE_NO), $IPO_MODE = SIPO_MODE(FHOME.IPO_FRAME), $LOAD = SLOAD(FHOME.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PDEFAULT), $APO = SAPO_PTP(PDEFAULT), $GEAR_JERK[1] = SGEAR_JERK(PDEFAULT), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
      
      RC_SETMSG("Moved to home position. Place test sheet in the workspace.")
      HALT
      
      ; Detect AprilTags
      flangePose = $POS_ACT_MES : INV_POS($TOOL)
      RET = EKI_SetString(serviceName[], "req/args/pose_frame", "external")
      RET = EKI_SetFrame(serviceName[], "req/args/robot_pose", flangePose)
      RET = EKI_Send(serviceName[], "req")
      
      RC_WAITFORRESULT(1)
      RC_READRESULT(serviceName[])
      
      ; Check detection result
      IF DetectionSuccessful() THEN
         ; Process detected tags
         IF NUMDETECTEDTAGS == 2 THEN
            ; Calculate midpoint between tags
            PointPose.X = DETECTEDTAGS[1].X + ((DETECTEDTAGS[2].X - DETECTEDTAGS[1].X) / 2)
            PointPose.Y = DETECTEDTAGS[1].Y + ((DETECTEDTAGS[2].Y - DETECTEDTAGS[1].Y) / 2)
            PointPose.Z = DETECTEDTAGS[1].Z + ((DETECTEDTAGS[2].Z - DETECTEDTAGS[1].Z) / 2)
            PointPose.A = DETECTEDTAGS[1].A
            PointPose.B = DETECTEDTAGS[1].B
            PointPose.C = DETECTEDTAGS[1].C
            
            ; Calculate pre-approach position
            F_OFFSET = $NULLFRAME
            F_OFFSET.Z = -preGraspOffsetZ
            PrePointPose = PointPose:F_OFFSET
            
            ; Display target position
            par[1] = {par_type #value, par_real 0}
            par[1].par_real = PrePointPose.X
            par[2] = {par_type #value, par_real 0}
            par[2].par_real = PrePointPose.Y
            par[3] = {par_type #value, par_real 0}
            par[3].par_real = PrePointPose.Z
            RC_SETMSG_PARAM("Target position: X: %1, Y: %2, Z: %3", par[])
            
            ; Move to pre-approach position
            SPTP PrePointPose WITH $VEL_AXIS[1] = SVEL_JOINT(rPTPVelocityStd), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO), $ACC_AXIS[1] = SACC_JOINT(pDatDefault), $APO = SAPO_PTP(pDatDefault), $GEAR_JERK[1] = SGEAR_JERK(pDatDefault)
            
            ; Move to target position
            SLIN PointPose WITH $VEL = SVEL_CP(rLinVelocitySlow), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO), $ACC = SACC_CP(lDatDefault), $ORI_TYPE = SORI_TYP(lDatDefault)
            
            RC_SETMSG("Target position reached. Measure deviation from crosshair. Continue to move home.")
            HALT
            
            ; Move back to pre-approach position
            SLIN PrePointPose WITH $VEL = SVEL_CP(rLinVelocitySlow), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO), $ACC = SACC_CP(lDatDefault), $ORI_TYPE = SORI_TYP(lDatDefault)
            
            ; Return to home
            SPTP XHOME WITH $VEL_AXIS[1] = SVEL_JOINT(rPTPVelocityStd), $TOOL = STOOL2(FHOME), $BASE = SBASE(FHOME.BASE_NO), $IPO_MODE = SIPO_MODE(FHOME.IPO_FRAME), $LOAD = SLOAD(FHOME.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PDEFAULT), $APO = SAPO_PTP(PDEFAULT), $GEAR_JERK[1] = SGEAR_JERK(PDEFAULT), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
         ELSE
            RC_SETMSG("Did not find 2 AprilTags")
            HALT
         ENDIF
      ELSE
         HandleDetectionFailure()
         HALT
      ENDIF
   ENDLOOP
   
   RC_CLOSECONNECTION(serviceName[], "req")
END

; ---- Roboception Functions ----
;FOLD RC Functions
   DEF ConfigureDetection(serviceName[]:IN)
      ; Configures detection parameters for AprilTag detection
      ;
      ; @param serviceName[]: EKI configuration/service name
      ;
      DECL CHAR serviceName[]
      DECL EKI_Status RET
      DECL E6POS flangePose
      
      flangePose = $POS_ACT_MES : INV_POS($TOOL)
      
      RET = EKI_SetString(serviceName[], "req/args/pose_frame", "external")
      RET = EKI_SetFrame(serviceName[], "req/args/robot_pose", flangePose)
   END
   
   DEF PerformDetection(serviceName[]:IN)
      ; Performs AprilTag detection using configured parameters
      ;
      ; @param serviceName[]: EKI configuration/service name
      ;
      DECL CHAR serviceName[]
      DECL EKI_Status RET
      
      RET = EKI_Send(serviceName[], "req")
      RC_WAITFORRESULT(1)
      RC_READRESULT(serviceName[])
   END
   
   DEFFCT BOOL DetectionSuccessful()
      ; Checks if AprilTag detection was successful
      ;
      ; @return TRUE if tags were detected, FALSE otherwise
      ;
      IF(RETURNCODE.VALUE < 0) THEN
         RETURN FALSE
      ENDIF
      
      IF NUMDETECTEDTAGS > 0 THEN
         ShowDetectionResults()
         RETURN TRUE
      ENDIF
      
      RETURN FALSE
   ENDFCT
   
   DEF ShowDetectionResults()
      ; Displays information about detected AprilTags
      ;
      DECL INT i
      DECL KrlMsgPar_T countPar[1]
      DECL KrlMsgPar_T par[4]
      
      countPar[1] = {par_type #value, par_real 0}
      countPar[1].par_real = NUMDETECTEDTAGS
      RC_SETMSG_PARAM("Number of AprilTags detected: %1", countPar[])
      
      FOR i=1 TO NUMDETECTEDTAGS
         par[1] = {par_type #value, par_real 0}
         par[1].par_real = i
         par[2] = {par_type #value, par_real 0}
         par[2].par_real = DETECTEDTAGS[i].X
         par[3] = {par_type #value, par_real 0}
         par[3].par_real = DETECTEDTAGS[i].Y
         par[4] = {par_type #value, par_real 0}
         par[4].par_real = DETECTEDTAGS[i].Z
         RC_SETMSG_PARAM("April Tag %1: X: %2, Y: %3, Z: %4", par[])
      ENDFOR
   END
   
   DEF HandleDetectionFailure()
      ; Handles cases where AprilTag detection fails
      ;
      IF(RETURNCODE.VALUE < 0) THEN
         RC_SETMSG("Execution failed")
      ELSE
         RC_SETMSG("No AprilTags detected")
      ENDIF
   END
   
   DEF RC_SETMSG(msg[]:IN)
      DECL CHAR msg[]
      DECL KrlMsgPar_T params[3]
      
      RC_SETMSG_PARAM(msg[], params[])
   END
   
   DEF RC_SETMSG_PARAM(msg[]:IN, params[]:OUT)
      DECL CHAR msg[]
      DECL KrlMsgPar_T params[]
      
      DECL KrlMsg_T name
      DECL KrlMsgOpt_T options
      DECL INT Handle, len, count
      DECL EKrlMsgType Type
      
      name={modul[] "RC", nr 1, msg_txt[] " "}
      Type=#notify
      
      len=STRLEN(msg[])
      IF len>0 THEN
         IF len>80 THEN
            len=80
         ENDIF
         FOR count=1 TO len
            name.msg_txt[count]=msg[count]
         ENDFOR
      ELSE
         name.msg_txt[]="parameter msg[] is missing"
      ENDIF
      
      Handle=Set_KrlMsg(Type, name, params[], options)
   END
   
   DEF RC_INIT(configFileName[]:IN)
      DECL CHAR configFileName[]
      DECL EKI_Status RET
      RET=EKI_INIT(configFileName[])
   END
   
   DEF RC_OPENCONNECTION(configFileName[]:IN)
      DECL CHAR configFileName[]
      DECL EKI_Status RET
      RET=EKI_Open(configFileName[])
      EKI_CHECK(RET,#Quit)
   END
   
   DEF RC_CLOSECONNECTION(configFileName[]:IN, strPlace[]:IN)
      DECL CHAR configFileName[]
      DECL CHAR strPlace[]
      DECL EKI_Status RET
      WAIT SEC 0
      RET=EKI_Close(configFileName[])
      RET=EKI_ClearBuffer(configFileName[], strPlace[])
   END
   
   DEF RC_WAITFORRESULT(WaitFlag:IN)
      DECL INT WaitFlag
      WAIT FOR $FLAG[WaitFlag] OR NOT $FLAG[RCEkiAliveFlagNo]
      IF(NOT $FLAG[RCEkiAliveFlagNo]) THEN
         RC_SETMSG("EKI connection lost")
      ENDIF
      $FLAG[WaitFlag] = FALSE
   END
   
   DEF RC_NOTIFYRECEIVED(WAITFLAG:IN, EOFRESULFLAG:IN)
      DECL INT WAITFLAG
      DECL INT EOFRESULFLAG
      $FLAG[EOFRESULFLAG]=FALSE
      $FLAG[WAITFLAG]=TRUE
   END
   
   DEF RC_READRESULT(configFileName[]:IN)
      DECL CHAR configFileName[]
      DECL RETURNCODE_T RESULT
      DECL EKI_STATUS RET
      DECL INT j
      DECL FRAME POSE
      
      POSE = POSE_IDENT
      RESULT={VALUE 0, MSG[] "0"}
      
      RET = EKI_GetInt(configFileName[], "res/return_code/@value", RESULT.VALUE)
      RET = EKI_GetString(configFileName[], "res/return_code/@message", RESULT.MSG[])
      RETURNCODE = RESULT
      
      RET = EKI_CheckBuffer(configFileName[], "res/tags/le/id")
      NUMDETECTEDTAGS = RET.Buff
      
      FOR j=1 TO NUMDETECTEDTAGS
         RET = EKI_GetFrame(configFileName[], "res/tags/le/pose", POSE)
         DETECTEDTAGS[j] = POSE
      ENDFOR
      
      RET = EKI_ClearBuffer(configFileName[], "res")
   END
;ENDFOLD (RC Functions)
