&ACCESS RVO
&REL 116
&PARAM EDITMASK = *
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&PARAM DISKPATH = KRC:\R1\Program
DEF CadmatchDetect( )

   DECL CHAR serviceName[32]
   DECL EKI_Status RET
   DECL FRAME CADMatchingPose
   DECL INT CUSTOM_TOOL_NO


   ;FOLD INI;%{PE}
      ;FOLD BASISTECH INI
         GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
         INTERRUPT ON 3
         BAS (#INITMOV,0 )
      ;ENDFOLD (BASISTECH INI)
      ;FOLD USER INI
         ;Make your modifications here

      ;ENDFOLD (USER INI)
   ;ENDFOLD (INI)

   INTERRUPT DECL 89 WHEN $FLAG[998] DO RC_NOTIFYRECEIVED(1, 998)
   INTERRUPT ON 89

   ;FOLD SPTP HOME Vel=100 % DEFAULT;%{PE}%MKUKATPBASIS,%CSPLINE,%VSPTP_SB,%P 1:SPTP_SB, 2:HOME, 3:, 5:100, 7:DEFAULT
      SPTP XHOME WITH $VEL_AXIS[1]= SVEL_JOINT( 100), $TOOL= STOOL2( FHOME), $BASE= SBASE( FHOME.BASE_NO),$IPO_MODE= SIPO_MODE( FHOME.IPO_FRAME), $LOAD= SLOAD( FHOME.TOOL_NO), $ACC_AXIS[1]= SACC_JOINT( PDEFAULT), $GEAR_JERK[1]= SGEAR_JERK( PDEFAULT)
   ;ENDFOLD

   ; Init cadmatch module and open connection to rc_cube
   RC_START()
   $FLAG[1] = FALSE
   RC_SETMSG("Start")

   ; Adjust custom tool no to the currently used tool
    CUSTOM_TOOL_NO = 0

   serviceName[] = "rc_cadmatch-detect_object"
   RC_INIT(serviceName[])
   RC_OPENCONNECTION(serviceName[])

   LOOP

      ; Reset vision results
      WAIT SEC 0
      ResetDetectedGrasps()


      ;If $TOOL is changed during program execution,
      ;$LOAD must also be adapted accordingly. Otherwise
      ;the robot will be moved with the wrong load data,
      ;which might result in loss of warranty.

      ; Set tool to flange to get correct $POS_ACT_MES
      $TOOL = TOOL_DATA[0]
      $LOAD = LOAD_DATA[0]


      ;****************************************
      ; Mandatory application parameters:
      ; ---------------------------------
      ; Template ID (Part) [Default: "Template_1"]
      ; Pose Frame, sensor or robot (external) [Default: "external"]
      ;****************************************
      RET = EKI_SetString(serviceName[], "req/args/template_id", "Template_1")
      RET = EKI_SetString(serviceName[], "req/args/pose_frame", "external")
      RET = EKI_SetFrame(serviceName[], "req/args/robot_pose", $POS_ACT_MES)

      ;****************************************
      ; Optional application parameters:
      ; --------------------------------
      ; Load Carrier ID (Box) [Default: "LoadCarrier_1"]
      ; Region of Interest ID [Default: "RegionOfInterest_1"]
      ; Gripper ID [Default: "Gripper_1"]
      ; Offset pre Pick for collision detection [Default: X 0.0, Y 0.0, Z -0.5]
      ; LC Box, if load carrier should be configured externally [Default: X 0.0, Y 0.0, Z 0.0]
      ; LC Pose, if load carrier should be configured externally [Default: X 0.0, Y 0.0, Z 0.0, A 0.0, B 0.0, C 0.0]
      ;****************************************
      RET = EKI_SetString(serviceName[], "req/args/load_carrier_id", "LoadCarrier_1")
      RET = EKI_SetString(serviceName[], "req/args/region_of_interest_id", "RegionOfInterest_1")
      RET = EKI_SetString(serviceName[], "req/args/collision_detection/@gripper_id", "Gripper_1")
      RET = EKI_SetReal(serviceName[], "req/args/collision_detection/pre_grasp_offset/@x", 0.0)
      RET = EKI_SetReal(serviceName[], "req/args/collision_detection/pre_grasp_offset/@y", 0.0)
      RET = EKI_SetReal(serviceName[], "req/args/collision_detection/pre_grasp_offset/@z", -0.5)
      ;RET = EKI_SetReal(serviceName[], "req/args/load_carrier_compartment/box/@x ", 0.0)
      ;RET = EKI_SetReal(serviceName[], "req/args/load_carrier_compartment/box/@y ", 0.0)
      ;RET = EKI_SetReal(serviceName[], "req/args/load_carrier_compartment/box/@z ", 0.0)
      ;RET = EKI_SetReal(serviceName[], "req/args/load_carrier_compartment/pose/@X ", 0.0)
      ;RET = EKI_SetReal(serviceName[], "req/args/load_carrier_compartment/pose/@Y ", 0.0)
      ;RET = EKI_SetReal(serviceName[], "req/args/load_carrier_compartment/pose/@Z ", 0.0)
      ;RET = EKI_SetReal(serviceName[], "req/args/load_carrier_compartment/pose/@A ", 0.0)
      ;RET = EKI_SetReal(serviceName[], "req/args/load_carrier_compartment/pose/@B ", 0.0)
      ;RET = EKI_SetReal(serviceName[], "req/args/load_carrier_compartment/pose/@C ", 0.0)

      ; Send trigger and wait for vision results
      RET = EKI_Send(serviceName[], "req")
      RC_WAITFORRESULT(1)
      RC_READRESULT(serviceName[])

      ; Switch tool back agian to predefined tool
      $TOOL = TOOL_DATA[CUSTOM_TOOL_NO]
      $LOAD = LOAD_DATA[CUSTOM_TOOL_NO]

      ; Error handling
      IF (RETURNCODE.VALUE < 0) THEN
         RC_SETMSG("Execution failed")
         RC_SETMSG(RETURNCODE.MSG[])
         HALT
      ENDIF

      ; No CAD matching result found
      IF NOT(CheckDetectedItem(1)) THEN
         MsgQuit("No CAD matchin vision result found","RC")
         HALT
      ENDIF

      ;Calculate pick position on first detected part
      CADMatchingPose=DETECTEDGRASPS[1]
      XP1 = CADMatchingPose

      ; Pre pick position
      ;FOLD SPTP P2 CONT Vel=100 % PDAT4 Tool[2]:Magnet Base[0] ;%{PE}
         ;FOLD Parameters ;%{h}
            ;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=P2; Kuka.BlendingEnabled=True; Kuka.MoveDataPtpName=PDAT4; Kuka.VelocityPtp=100; Kuka.VelocityFieldEnabled=True; Kuka.ColDetectFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
         ;ENDFOLD
         SPTP XP2 WITH $VEL_AXIS[1] = SVEL_JOINT(100.0), $TOOL = STOOL2(FP2), $BASE = SBASE(FP2.BASE_NO), $IPO_MODE = SIPO_MODE(FP2.IPO_FRAME), $LOAD = SLOAD(FP2.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PPDAT4), $APO = SAPO_PTP(PPDAT4), $GEAR_JERK[1] = SGEAR_JERK(PPDAT4), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0) C_Spl
      ;ENDFOLD

      ; Pick position
      ;FOLD LIN P1 Vel=0.2 m/s CPDAT1 Tool[2]:Magnet Base[0] ;%{PE}
         ;FOLD Parameters ;%{h}
            ;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.old; Kuka.IsGlobalPoint=False; Kuka.PointName=P1; Kuka.BlendingEnabled=False; Kuka.MoveDataName=CPDAT1; Kuka.VelocityPath=0.2; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=LIN
         ;ENDFOLD
         $BWDSTART = FALSE
         LDAT_ACT = LCPDAT1
         FDAT_ACT = FP1
         BAS(#CP_PARAMS, 0.2)
         SET_CD_PARAMS (0)
         LIN XP1
      ;ENDFOLD

      ; Post pick position
      ;FOLD LIN P2 CONT Vel=2 m/s CPDAT3 Tool[2]:Magnet Base[0] ;%{PE}
         ;FOLD Parameters ;%{h}
            ;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.old; Kuka.IsGlobalPoint=False; Kuka.PointName=P2; Kuka.BlendingEnabled=True; Kuka.MoveDataName=CPDAT3; Kuka.VelocityPath=2; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=LIN
         ;ENDFOLD
         $BWDSTART = FALSE
         LDAT_ACT = LCPDAT3
         FDAT_ACT = FP2
         BAS(#CP_PARAMS, 2.0)
         SET_CD_PARAMS (0)
         LIN XP2 C_Dis C_Dis
      ;ENDFOLD

      RC_SETMSG("Finish")

      ; Place position
      ;FOLD SPTP P3 Vel=100 % PDAT3 Tool[2] Base[0] ;%{PE}
         ;FOLD Parameters ;%{h}
            ;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=P3; Kuka.BlendingEnabled=False; Kuka.MoveDataPtpName=PDAT3; Kuka.VelocityPtp=100; Kuka.VelocityFieldEnabled=True; Kuka.ColDetectFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
         ;ENDFOLD
         SPTP XP3 WITH $VEL_AXIS[1] = SVEL_JOINT(100.0), $TOOL = STOOL2(FP3), $BASE = SBASE(FP3.BASE_NO), $IPO_MODE = SIPO_MODE(FP3.IPO_FRAME), $LOAD = SLOAD(FP3.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PPDAT3), $APO = SAPO_PTP(PPDAT3), $GEAR_JERK[1] = SGEAR_JERK(PPDAT3), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
      ;ENDFOLD

      ;FOLD SPTP HOME Vel=100 % DEFAULT;%{PE}%MKUKATPBASIS,%CSPLINE,%VSPTP_SB,%P 1:SPTP_SB, 2:HOME, 3:, 5:100, 7:DEFAULT
         SPTP XHOME WITH $VEL_AXIS[1]= SVEL_JOINT( 100), $TOOL= STOOL2( FHOME), $BASE= SBASE( FHOME.BASE_NO),$IPO_MODE= SIPO_MODE( FHOME.IPO_FRAME), $LOAD= SLOAD( FHOME.TOOL_NO), $ACC_AXIS[1]= SACC_JOINT( PDEFAULT), $GEAR_JERK[1]= SGEAR_JERK( PDEFAULT)
      ;ENDFOLD

   ENDLOOP

   RC_STOP()
   RC_CLOSECONNECTION(serviceName[], "req")

END

;FOLD RC_SETMSG
   DEF RC_SETMSG(msg[]:IN)
      DECL CHAR msg[]
      DECL KrlMsgPar_T params[3]
      RC_SETMSG_PARAM(msg[], params[])
   END

;ENDFOLD (RC_SETMSG)

;FOLD RC_SETMSG_PARAM
DEF RC_SETMSG_PARAM(msg[]:IN, params:OUT)
  DECL CHAR msg[]
  DECL KrlMsgPar_T params[]

  DECL KrlMsg_T name
  DECL KrlMsgOpt_T options
  DECL INT Handle, len, count
  DECL EKrlMsgType Type

  name={modul[] "RC", nr 1, msg_txt[] " "}

  Type=#notify

  len=STRLEN(msg[])
  IF len>0 THEN
    IF len>80 THEN
      len=80
    ENDIF
    FOR count=1 TO len
      name.msg_txt[count]=msg[count]
    ENDFOR
  ELSE
    name.msg_txt[]="parameter msg[] is missing"
  ENDIF

  Handle=Set_KrlMsg(Type, name, params[], options)
END
;ENDFOLD (RC_SETMSG_PARAM)

;FOLD RC_INIT
   DEF RC_INIT(configFileName[]:IN)
      DECL CHAR configFileName[]
      DECL EKI_Status RET
      RET=EKI_INIT(configFileName[])
   END

;ENDFOLD (RC_INIT)

;FOLD RC_OPENCONNECTION
   DEF RC_OPENCONNECTION(configFileName[]:IN)
      DECL CHAR configFileName[]
      DECL EKI_Status RET
      RET=EKI_Open(configFileName[])
      EKI_CHECK(RET,#Quit)
   END

;ENDFOLD (RC_OPENCONNECTION)

;FOLD RC_CLOSECONNECTION
   DEF RC_CLOSECONNECTION(configFileName[]:IN, strPlace[]:IN)
      DECL CHAR configFileName[]
      DECL CHAR strPlace[]
      DECL EKI_Status RET
      WAIT SEC 0
      RET=EKI_Close(configFileName[])
      RET=EKI_ClearBuffer(configFileName[], strPlace[])
   END
;ENDFOLD (RC_CLOSECONNECTION)

;FOLD RC_WAITFORRESULT
   DEF RC_WAITFORRESULT(WaitFlag:IN)
      DECL INT WaitFlag

      WAIT FOR $FLAG[WaitFlag] OR NOT $FLAG[RCEkiAliveFlagNo]

      ;Eki-connection has been closed

      IF(NOT $FLAG[RCEkiAliveFlagNo]) THEN
         RC_SETMSG("EKI connection lost")
      ENDIF

      $FLAG[WaitFlag] = FALSE
      WAIT SEC 0
   END

;ENDFOLD (RC_WAITFORRESULT)

;FOLD RC_NOTIFYRECEIVED
   DEF RC_NOTIFYRECEIVED(WAITFLAG:IN, EOFRESULFLAG:IN)
      DECL INT WAITFLAG
      DECL INT EOFRESULFLAG
      $FLAG[EOFRESULFLAG]=FALSE
      $FLAG[WAITFLAG]=TRUE
   END

;ENDFOLD (RC_NOTIFYRECEIVED)

;FOLD RC_READRESULT
   DEF RC_READRESULT(configFileName[]:IN)
      DECL CHAR configFileName[]
      DECL RETURNCODE_T RESULT
      DECL EKI_STATUS RET
      DECL INT j
      DECL FRAME POSE

      POSE = POSE_IDENT

      RESULT={VALUE 0, MSG[] "0"}

      ;Receive error codes
      RET = EKI_GetInt(configFileName[], "res/return_code/@value", RESULT.VALUE)
      RET = EKI_GetString(configFileName[], "res/return_code/@message", RESULT.MSG[])
      RETURNCODE = RESULT

      ;Receive number of detections
      RET = EKI_CheckBuffer(configFileName[], "res/grasps/le/id")
      NUMDETECTEDGRASPS = RET.Buff

      ;Receive frames
      for j=1 to NUMDETECTEDGRASPS

         RET = EKI_GetFrame(configFileName[], "res/grasps/le/pose", POSE)
         DETECTEDGRASPS[j] = POSE

      endfor

      RET = EKI_ClearBuffer(configFileName[], "res")
   END

;ENDFOLD (RC_READRESULT)

;FOLD RC_START
   DEF RC_START()

      DECL CHAR serviceName[32]
      DECL EKI_Status RET

      ; Init
      $FLAG[1] = FALSE
      RC_SETMSG("Start")
      serviceName[] = "rc_cadmatch-start"

      ; Open connection
      RC_INIT(serviceName[])
      RC_OPENCONNECTION(serviceName[])

      ; Trigger vision
      RET = EKI_Send(serviceName[], "req")

      ; Wait for vision result
      RC_WAITFORRESULT(1)

      ; Close connection
      RC_CLOSECONNECTION(serviceName[], "req")

   END

;ENDFOLD (RC_START)

;FOLD RC_STOP
   DEF RC_STOP()

      DECL CHAR serviceName[32]
      DECL EKI_Status RET

      ; Init
      $FLAG[1] = FALSE
      RC_SETMSG("Stop")
      serviceName[] = "rc_cadmatch-stop"

      ; Open connection
      RC_INIT(serviceName[])
      RC_OPENCONNECTION(serviceName[])

      ; Trigger vision
      RET = EKI_Send(serviceName[], "req")

      ; Wait for vision result
      RC_WAITFORRESULT(1)

      ; Close connection
      RC_CLOSECONNECTION(serviceName[], "req")

   END

;ENDFOLD (RC_STOP)

;FOLD (ResetDetectedGrasps)
   DEF ResetDetectedGrasps()
      DECL INT I

      FOR I = 1 TO 32 STEP 1
         DETECTEDGRASPS[I]=$NULLFRAME
      ENDFOR
   END

;ENDFOLD (ResetDetectedGrasps)

;FOLD CheckDetectedItem
   DEFFCT BOOL CheckDetectedItem(Index:IN)
      DECL INT Index
      DECL KrlMsgPar_T par[3]

      IF (DETECTEDGRASPS[Index].X == 0) AND (DETECTEDGRASPS[Index].Y == 0) AND (DETECTEDGRASPS[Index].Z == 0) AND (DETECTEDGRASPS[Index].A == 0) AND (DETECTEDGRASPS[Index].B == 0) AND (DETECTEDGRASPS[Index].C ==0) THEN
         RETURN FALSE
      ELSE
         ;Show cad match pose
         par[1] = {par_type #value, par_real 0}
         par[1].par_real = DETECTEDGRASPS[1].X
         par[2] = {par_type #value, par_real 0}
         par[2].par_real = DETECTEDGRASPS[1].Y
         par[3] = {par_type #value, par_real 0}
         par[3].par_real = DETECTEDGRASPS[1].Z
         RC_SETMSG_PARAM("Grasp pose: X: %1, Y: %2, Z: %3", par[])
         RETURN TRUE
      ENDIF

   ENDFCT

;ENDFOLD (CheckDetectedItem)
