&ACCESS RVO
&REL 1
&PARAM DISKPATH = KRC:\R1\Program

DEF EstimateRobotPose()
   ;------------------------------------------------------------------------
   ; Robot Pose Estimation Example for Roboception rc_visard/rc_cube
   ;
   ; This program demonstrates robot pose estimation using AprilTag markers.
   ; It performs the following sequence:
   ; 1. Moves to a pre-point position
   ; 2. Estimates the robot's current pose using AprilTag detection
   ; 3. Calculates a correction transformation
   ; 4. Moves to the target position with and without correction
   ; 5. Allows comparison of target vs corrected positions
   ;
   ; IMPORTANT: 
   ; 1. The service names MUST match exactly with your EKI XML configuration files
   ; 2. The AprilTag markers must be visible from the pre-point position
   ; 3. The tag IDs must match those used in hand-eye calibration
   ; 4. The program uses a correction transformation to improve accuracy
   ;------------------------------------------------------------------------
   DECL CHAR serviceNameDetect[64]
   DECL CHAR serviceNameEstimate[64]
   DECL KrlMsgPar_T par[3]
   DECL FRAME PointPose, PrePointPose
   DECL FRAME CorrectedPointPose, CorrectedPrePointPose
   DECL FRAME F_OFFSET
   DECL FRAME P_actual
   DECL FRAME T_correction
   ;------------------------------------------------------------------------
   ; Service names - MUST match exactly with your EKI XML configuration files
   ; Initialize EKI connections with better error handling
   serviceNameEstimate[] = "new_lab_1_rc_hand_eye_calibration-estimate_robot_pose"
   serviceNameDetect[] = "new_lab_1_rc_april_tag_detect-detect"
   
   ;FOLD INI;%{PE}
      ;FOLD BASISTECH INI
         GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM()
         INTERRUPT ON 3 
         BAS (#INITMOV,0)
      ;ENDFOLD (BASISTECH INI)
   ;ENDFOLD (INI)
   
   INTERRUPT DECL 89 WHEN $FLAG[998] DO RC_NOTIFYRECEIVED(1, 998)
   INTERRUPT ON 89
   
   RC_INIT(serviceNameEstimate[])
   RC_INIT(serviceNameDetect[])
   
   LOOP
      ;FOLD SPTP HOME Vel=10 % DEFAULT ;%{PE}
         ;FOLD Parameters ;%{h}
            ;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=HOME; Kuka.BlendingEnabled=False; Kuka.MoveDataPtpName=DEFAULT; Kuka.VelocityPtp=10; Kuka.VelocityFieldEnabled=True; Kuka.ColDetectFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
         ;ENDFOLD
         SPTP XHOME WITH $VEL_AXIS[1] = SVEL_JOINT(rPTPVelocityStd), $TOOL = STOOL2(FHOME), $BASE = SBASE(FHOME.BASE_NO), $IPO_MODE = SIPO_MODE(FHOME.IPO_FRAME), $LOAD = SLOAD(FHOME.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PDEFAULT), $APO = SAPO_PTP(PDEFAULT), $GEAR_JERK[1] = SGEAR_JERK(PDEFAULT), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
      ;ENDFOLD
      
      RC_SETMSG("Moved to home position. Place test sheet in the workspace.")
      HALT
      
      AprilTagDetection(serviceNameDetect[])
      
      IF DetectionSuccessful() THEN
         ; Calculate point pose - add better error checking
         IF NOT CalculatePointPoseFCT(PointPose) THEN
            RC_SETMSG("Failed to calculate point pose")
            HALT  ; Stop here to let user decide whether to continue
            CONTINUE  ; Skip rest of loop and start over
         ENDIF
         
         ; Calculate pre-point pose using frame offset
         F_OFFSET = $NULLFRAME
         F_OFFSET.Z = -preGraspOffsetZ
         PrePointPose = PointPose:F_OFFSET
         
         ; Log positions
         par[1] = {par_type #value, par_real 0}
         par[1].par_real = PrePointPose.X
         par[2] = {par_type #value, par_real 0}
         par[2].par_real = PrePointPose.Y
         par[3] = {par_type #value, par_real 0}
         par[3].par_real = PrePointPose.Z
         
         RC_SETMSG_PARAM("Target position: X: %1, Y: %2, Z: %3", par[])
         
         par[1] = {par_type #value, par_real 0}
         par[1].par_real = PrePointPose.A
         par[2] = {par_type #value, par_real 0}
         par[2].par_real = PrePointPose.B
         par[3] = {par_type #value, par_real 0}
         par[3].par_real = PrePointPose.C
         
         RC_SETMSG_PARAM("Target orientation: A: %1, B: %2, C: %3", par[])
         
         ; Move to pre-point pose and get an updated robot pose estimation
         SPTP PrePointPose WITH $VEL_AXIS[1] = SVEL_JOINT(rPTPVelocityStd), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO), $ACC_AXIS[1] = SACC_JOINT(pDatDefault), $APO = SAPO_PTP(pDatDefault), $GEAR_JERK[1] = SGEAR_JERK(pDatDefault)
         
         ; Get the robot pose estimation at the pre-point position
         RC_ESTIMATEROBOTPOSE(serviceNameEstimate[], P_actual, T_correction)   
         
         ; Pause to review estimated pose
         ;RC_SETMSG("Pause to review estimated pose. Continue when ready...")
         ;HALT
         
         ; Calculate corrected positions by applying the correction transformation 
         CorrectedPointPose = T_correction : PointPose
         CorrectedPrePointPose = T_correction : PrePointPose
         
         ; Log the corrected pose
         RC_SETMSG("Moving to TARGET")
         ; Now move to the corrected positions
         SLIN PointPose WITH $VEL = SVEL_CP(rLinVelocitySlow), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO), $ACC = SACC_CP(lDatDefault), $ORI_TYPE = SORI_TYP(lDatDefault)
         HALT
         ; Log the corrected pose
         RC_SETMSG("Moving to CORRECTED TARGET")
         ; Now move to the corrected positions
         SLIN CorrectedPointPose WITH $VEL = SVEL_CP(rLinVelocitySlow), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO), $ACC = SACC_CP(lDatDefault), $ORI_TYPE = SORI_TYP(lDatDefault)
         HALT
         RC_SETMSG("Corrected target position reached. Measure deviation from crosshair. Continue to move home.")
         HALT
         
         SLIN CorrectedPrePointPose WITH $VEL = SVEL_CP(rLinVelocitySlow), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO), $ACC = SACC_CP(lDatDefault), $ORI_TYPE = SORI_TYP(lDatDefault)
         
         ;FOLD SPTP HOME Vel=100 % DEFAULT ;%{PE}
            ;FOLD Parameters ;%{h}
               ;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=HOME; Kuka.BlendingEnabled=False; Kuka.MoveDataPtpName=DEFAULT; Kuka.VelocityPtp=100; Kuka.VelocityFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
            ;ENDFOLD
            SPTP XHOME WITH $VEL_AXIS[1] = SVEL_JOINT(rPTPVelocityStd), $TOOL = STOOL2(FHOME), $BASE = SBASE(FHOME.BASE_NO), $IPO_MODE = SIPO_MODE(FHOME.IPO_FRAME), $LOAD = SLOAD(FHOME.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PDEFAULT), $APO = SAPO_PTP(PDEFAULT), $GEAR_JERK[1] = SGEAR_JERK(PDEFAULT), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
         ;ENDFOLD
         
      ELSE
         HandleDetectionFailure()
         HALT
         CONTINUE
      ENDIF     
      
   ENDLOOP
END

; Helper function for grasp pose calculation using FCT
DEFFCT BOOL CalculatePointPoseFCT(PointPose:OUT)
   DECL FRAME PointPose
   
   ; Validate input poses
   IF NOT ValidatePose(DETECTEDTAGS[1]) OR NOT ValidatePose(DETECTEDTAGS[2]) THEN
      RETURN FALSE
   ENDIF
   
   ; Calculate midpoint between tags
   PointPose.X = DETECTEDTAGS[1].X + ((DETECTEDTAGS[2].X - DETECTEDTAGS[1].X) / 2)
   PointPose.Y = DETECTEDTAGS[1].Y + ((DETECTEDTAGS[2].Y - DETECTEDTAGS[1].Y) / 2)
   PointPose.Z = DETECTEDTAGS[1].Z + ((DETECTEDTAGS[2].Z - DETECTEDTAGS[1].Z) / 2)
   
   ; Use orientation from first tag
   PointPose.A = DETECTEDTAGS[1].A
   PointPose.B = DETECTEDTAGS[1].B
   PointPose.C = DETECTEDTAGS[1].C
   
   RETURN TRUE
ENDFCT

; Helper function to validate pose
DEFFCT BOOL ValidatePose(Pose:IN)
   DECL FRAME Pose
   
   IF (Pose.X == 0) AND (Pose.Y == 0) AND (Pose.Z == 0) AND (Pose.A == 0) AND (Pose.B == 0) AND (Pose.C == 0) THEN
      RETURN FALSE
   ENDIF
   
   RETURN TRUE
ENDFCT

DEF RC_SETMSG(msg[]:IN)
   DECL CHAR msg[]
   DECL KrlMsgPar_T params[3]
   
   RC_SETMSG_PARAM(msg[], params[])
END

DEF RC_SETMSG_PARAM(msg[]:IN, params:OUT)
   DECL CHAR msg[]
   DECL KrlMsgPar_T params[]
   
   DECL KrlMsg_T name
   DECL KrlMsgOpt_T options
   DECL INT Handle, len, count
   DECL EKrlMsgType Type
   
   name={modul[] "rc", nr 1, msg_txt[] " "}
   
   Type=#notify
   
   len=STRLEN(msg[])
   IF len>0 THEN
      IF len>80 THEN
         len=80
      ENDIF
      FOR count=1 TO len
         name.msg_txt[count]=msg[count]
      ENDFOR
   ELSE
      name.msg_txt[]="parameter msg[] is missing"
   ENDIF
   
   Handle=Set_KrlMsg(Type, name, params[], options)
END

;FOLD RC_INIT
   DEF RC_INIT(configFileName[]:IN)
      DECL CHAR configFileName[]
      DECL EKI_Status RET
      RET=EKI_INIT(configFileName[])
   END
;ENDFOLD (RC_INIT)

;FOLD RC_OPENCONNECTION
   DEF RC_OPENCONNECTION(configFileName[]:IN)
      DECL CHAR configFileName[]
      DECL EKI_Status RET
      RET = EKI_Open(configFileName[])
      EKI_CHECK(RET,#Quit)    ; This will quit if connection fails
   END
;ENDFOLD (RC_OPENCONNECTION)

;FOLD RC_CLOSECONNECTION
   DEF RC_CLOSECONNECTION(configFileName[]:IN, strPlace[]:IN)
      DECL CHAR configFileName[]
      DECL CHAR strPlace[]
      DECL EKI_Status RET
      WAIT SEC 0
      RET=EKI_Close(configFileName[])
      RET=EKI_ClearBuffer(configFileName[], strPlace[])
   END
;ENDFOLD (RC_CLOSECONNECTION)

;FOLD RC_WAITFORRESULT
   DEF RC_WAITFORRESULT(WaitFlag:IN)
      DECL INT WaitFlag
      
      WAIT FOR $FLAG[WaitFlag] OR NOT $FLAG[RCEkiAliveFlagNo]
      
      ; EKI-connection has been closed 
      IF(NOT $FLAG[RCEkiAliveFlagNo]) THEN
         RC_SETMSG("EKI connection lost")
      ENDIF
      
      $FLAG[WaitFlag] = FALSE
      WAIT SEC 0
   END
;ENDFOLD (RC_WAITFORRESULT)

;FOLD RC_NOTIFYRECEIVED
   DEF RC_NOTIFYRECEIVED(WAITFLAG:IN, EOFRESULFLAG:IN)
      DECL INT WAITFLAG
      DECL INT EOFRESULFLAG
      $FLAG[EOFRESULFLAG]=FALSE
      $FLAG[WAITFLAG]=TRUE
   END
;ENDFOLD (RC_NOTIFYRECEIVED)

;FOLD AprilTagDetection
   DEF AprilTagDetection(serviceNameDetect[]:IN)
      ; Performs AprilTag detection using configured parameters
      ; and reads the results using RC_READTAGRESULT
      ;
      ; @param serviceNameDetect[]: EKI configuration/service name
      ;
      DECL CHAR serviceNameDetect[]
      DECL EKI_Status RET
      DECL E6POS flangePose
      DECL CHAR tagId[80]
      DECL RETURNCODE_T RESULT
      DECL INT j
      DECL FRAME POSE
      flangePose = $POS_ACT_MES : INV_POS($TOOL)
      
      RC_OPENCONNECTION(serviceNameDetect[])
      
      RET = EKI_SetString(serviceNameDetect[], "req/args/pose_frame", "external")
      RET = EKI_SetFrame(serviceNameDetect[], "req/args/robot_pose", flangePose)
      
      ; Synchronize advance run pointer
      WAIT SEC 0
      RET = EKI_Send(serviceNameDetect[], "req")
      RC_WAITFORRESULT(1)
      
      POSE = POSE_IDENT
      tagId[]="-"
      RESULT={VALUE 0, MSG[] "0"}
      
      ; Check if return code exists in buffer before trying to read it
      RET = EKI_CheckBuffer(serviceNameDetect[], "res/return_code/@value")
      IF RET.Buff > 0 THEN
         RET = EKI_GetInt(serviceNameDetect[], "res/return_code/@value", RESULT.VALUE)
         RET = EKI_GetString(serviceNameDetect[], "res/return_code/@message", RESULT.MSG[])
         RETURNCODE = RESULT

         IF (RESULT.VALUE < 0) THEN
            RC_SETMSG("API Error")
            RC_SETMSG(RESULT.MSG[])
         ENDIF
      ENDIF
      
      ; Check if we have any tags
      RET = EKI_CheckBuffer(serviceNameDetect[], "res/tags/le/instance_id")
      NUMDETECTEDTAGS = RET.Buff
      
      for j=1 to NUMDETECTEDTAGS
         RET = EKI_GetString(serviceNameDetect[], "res/tags/le/id", tagId[])
         
         IF STRCOMP(tagId[], "36h11_1", (#CASE_SENS)) THEN
            RET = EKI_GetFrame(serviceNameDetect[], "res/tags/le/pose", POSE)
            DETECTEDTAGS[1] = POSE
         ENDIF
         
         IF STRCOMP(tagId[], "36h11_0", (#CASE_SENS)) THEN
            RET = EKI_GetFrame(serviceNameDetect[], "res/tags/le/pose", POSE)
            DETECTEDTAGS[2] = POSE
         ENDIF    
      endfor
      
      RET = EKI_ClearBuffer(serviceNameDetect[], "res")
      
      RC_CLOSECONNECTION(serviceNameDetect[], "req")
   END
;ENDFOLD (AprilTagDetection)

;FOLD DetectionSuccessful
   DEFFCT BOOL DetectionSuccessful()
      ; Checks if AprilTag detection was successful
      ;
      ; @return TRUE if tags were detected, FALSE otherwise
      ;
      IF(RETURNCODE.VALUE < 0) THEN
         RETURN FALSE
      ENDIF
      
      IF NUMDETECTEDTAGS > 0 THEN
         RETURN TRUE
      ENDIF
      
      RETURN FALSE
   ENDFCT
;ENDFOLD (DetectionSuccessful)

;FOLD HandleDetectionFailure
   DEF HandleDetectionFailure()
      ; Handles cases where AprilTag detection fails
      ;
      IF(RETURNCODE.VALUE < 0) THEN
         RC_SETMSG("Execution failed")
      ELSE
         RC_SETMSG("No AprilTags detected")
      ENDIF
   END
;ENDFOLD (HandleDetectionFailure)

;FOLD RC_ESTIMATEROBOTPOSE
   DEF RC_ESTIMATEROBOTPOSE(serviceNameEstimate[]:IN, P_actual:OUT, T_correction:OUT)
      ; Reads robot pose estimation results from the EKI buffer and calculates correction transformation
      ;
      ; @param serviceNameEstimate[]: EKI configuration/service name
      ; @param P_actual: Output parameter for the actual pose (P_actual) measured by vision
      ;
      DECL CHAR serviceNameEstimate[]
      DECL FRAME P_actual
      DECL FRAME T_correction
      DECL FRAME P_cmd
      DECL RETURNCODE_T RESULT
      DECL EKI_Status RET
      DECL KrlMsgPar_T par[3]
      
      P_actual = $NULLFRAME
      RESULT={VALUE 0, MSG[] "0"}
      
      ; FORCE SYNC
      WAIT SEC 0
      P_cmd = $POS_ACT_MES : INV_POS($TOOL)
      
      ; FORCE SYNC
      WAIT SEC 0
      ; Open connection before sending request
      RC_OPENCONNECTION(serviceNameEstimate[])
      
      ; Call estimate robot pose service
      RET = EKI_Send(serviceNameEstimate[], "req")
      
      ; Wait for result
      RC_WAITFORRESULT(1)
      
      ; Get return code
      RET = EKI_GetInt(serviceNameEstimate[], "res/return_code/@value", RESULT.VALUE)
      RET = EKI_GetString(serviceNameEstimate[], "res/return_code/@message", RESULT.MSG[])
      RETURNCODE = RESULT

      ; Read pose components
      RET = EKI_GetReal(serviceNameEstimate[], "res/pose/@X", P_actual.X)
      RET = EKI_GetReal(serviceNameEstimate[], "res/pose/@Y", P_actual.Y)
      RET = EKI_GetReal(serviceNameEstimate[], "res/pose/@Z", P_actual.Z)
      RET = EKI_GetReal(serviceNameEstimate[], "res/pose/@A", P_actual.A)
      RET = EKI_GetReal(serviceNameEstimate[], "res/pose/@B", P_actual.B)
      RET = EKI_GetReal(serviceNameEstimate[], "res/pose/@C", P_actual.C)
      
      IF  ValidatePose(P_actual) THEN
         ; Display actual position and orientation (P_actual from vision)
         par[1] = {par_type #value, par_real 0}
         par[1].par_real = P_actual.X
         par[2] = {par_type #value, par_real 0}
         par[2].par_real = P_actual.Y
         par[3] = {par_type #value, par_real 0}
         par[3].par_real = P_actual.Z
         RC_SETMSG_PARAM("P_actual Pos: X:%1 Y:%2 Z:%3", par[])
         
         par[1].par_real = P_actual.A
         par[2].par_real = P_actual.B
         par[3].par_real = P_actual.C
         RC_SETMSG_PARAM("P_actual Rot: A:%1 B:%2 C:%3", par[])
         
         ; Get commanded tool position (P_cmd - where robot thinks it is)
         
         ; Display commanded position and orientation
         par[1].par_real = P_cmd.X
         par[2].par_real = P_cmd.Y
         par[3].par_real = P_cmd.Z
         RC_SETMSG_PARAM("P_cmd Pos: X:%1 Y:%2 Z:%3", par[])
         
         par[1].par_real = P_cmd.A
         par[2].par_real = P_cmd.B
         par[3].par_real = P_cmd.C
         RC_SETMSG_PARAM("P_cmd Rot: A:%1 B:%2 C:%3", par[])
         
         ; Calculate correction transformation
         T_correction = P_cmd : INV_POS(P_actual)
         
         ; Display the correction frame values
         par[1].par_real = T_correction.X
         par[2].par_real = T_correction.Y
         par[3].par_real = T_correction.Z
         RC_SETMSG_PARAM("Correction Pos: X:%1 Y:%2 Z:%3", par[])
         
         par[1].par_real = T_correction.A
         par[2].par_real = T_correction.B
         par[3].par_real = T_correction.C
         RC_SETMSG_PARAM("Correction Rot: A:%1 B:%2 C:%3", par[])
         
         RC_SETMSG("Correction transformation calculated and stored. Ready to apply to movements.")
      ELSE
         RC_SETMSG("Invalid pose received from estimate robot pose service")
         HALT
      ENDIF
      
      ; Clear buffer after reading results
      RET = EKI_ClearBuffer(serviceNameEstimate[], "res")
      
      ; Close connection after reading results
      RC_CLOSECONNECTION(serviceNameEstimate[], "req")
   END
;ENDFOLD (RC_ESTIMATEROBOTPOSE)
