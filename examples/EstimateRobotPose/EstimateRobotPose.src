&ACCESS RVP
&PARAM DISKPATH = KRC:\R1\Program\RC\NewEkiExamples
DEF EstimateRobotPose()
   ; EKI
   DECL CHAR serviceNameDetect[64]
   DECL CHAR serviceNameEstimate[64]
   DECL EKI_Status RET
   DECL KrlMsgPar_T par[3]
   DECL FRAME PointPose
   DECL FRAME PrePointPose
   DECL FRAME F_OFFSET
   
   ;FOLD INI;%{PE}
      ;FOLD BASISTECH INI
         GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM()
         INTERRUPT ON 3 
         BAS (#INITMOV,0)
      ;ENDFOLD (BASISTECH INI)
      ;FOLD USER INI
         $OV_PRO=10
      ;ENDFOLD (USER INI)
   ;ENDFOLD (INI)
   
   INTERRUPT DECL 89 WHEN $FLAG[998] DO RC_NOTIFYRECEIVED(1, 998)
   INTERRUPT ON 89
   
   ; Initialize correction transformation as identity
   CorrectionTransformation = $NULLFRAME
   
   ; Initialize EKI connections with better error handling
   serviceNameEstimate[] = "new_lab_1_rc_hand_eye_calibration-estimate_robot_pose"
   RC_INIT(serviceNameEstimate[])
   
   serviceNameDetect[] = "new_lab_1_rc_april_tag_detect-detect"
   RC_INIT(serviceNameDetect[])
   
   
   ; Now continue with the regular program
   RC_OPENCONNECTION(serviceNameDetect[])
   
   LOOP
      ;FOLD SPTP HOME Vel=10 % DEFAULT ;%{PE}
         ;FOLD Parameters ;%{h}
            ;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=HOME; Kuka.BlendingEnabled=False; Kuka.MoveDataPtpName=DEFAULT; Kuka.VelocityPtp=10; Kuka.VelocityFieldEnabled=True; Kuka.ColDetectFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
         ;ENDFOLD
         SPTP XHOME WITH $VEL_AXIS[1] = SVEL_JOINT(rPTPVelocityStd), $TOOL = STOOL2(FHOME), $BASE = SBASE(FHOME.BASE_NO), $IPO_MODE = SIPO_MODE(FHOME.IPO_FRAME), $LOAD = SLOAD(FHOME.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PDEFAULT), $APO = SAPO_PTP(PDEFAULT), $GEAR_JERK[1] = SGEAR_JERK(PDEFAULT), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
      ;ENDFOLD
      
      RC_SETMSG("Moved to home position. Place test sheet in the workspace.")
      HALT
      
      ; Call detect service
      ConfigureDetection(serviceNameDetect[])
      PerformDetection(serviceNameDetect[])
      
      IF DetectionSuccessful() THEN
         ; Calculate point pose - add better error checking
         IF NOT CalculatePointPoseFCT(PointPose) THEN
            RC_SETMSG("Failed to calculate point pose")
            HALT  ; Stop here to let user decide whether to continue
            CONTINUE  ; Skip rest of loop and start over
         ENDIF
         
         ; Calculate pre-point pose using frame offset
         F_OFFSET = $NULLFRAME
         F_OFFSET.Z = -preGraspOffsetZ
         PrePointPose = PointPose:F_OFFSET
         
         ; Log positions
         par[1] = {par_type #value, par_real 0}
         par[1].par_real = PrePointPose.X
         par[2] = {par_type #value, par_real 0}
         par[2].par_real = PrePointPose.Y
         par[3] = {par_type #value, par_real 0}
         par[3].par_real = PrePointPose.Z
         
         RC_SETMSG_PARAM("Target position: X: %1, Y: %2, Z: %3", par[])
         
         par[1] = {par_type #value, par_real 0}
         par[1].par_real = PrePointPose.A
         par[2] = {par_type #value, par_real 0}
         par[2].par_real = PrePointPose.B
         par[3] = {par_type #value, par_real 0}
         par[3].par_real = PrePointPose.C
         
         RC_SETMSG_PARAM("Target orientation: A: %1, B: %2, C: %3", par[])
         
         ; Execute movement sequence with better error handling
         IF NOT ExecutePointSequenceFCT(PrePointPose, PointPose, serviceNameEstimate[]) THEN
            RC_SETMSG("Movement sequence failed")
            HALT  ; Stop here to let user decide whether to continue
            CONTINUE  ; Skip rest of loop and start over
         ENDIF
         
         ;FOLD SPTP HOME Vel=100 % DEFAULT ;%{PE}
            ;FOLD Parameters ;%{h}
               ;Params IlfProvider=kukaroboter.basistech.inlineforms.movement.spline; Kuka.IsGlobalPoint=False; Kuka.PointName=HOME; Kuka.BlendingEnabled=False; Kuka.MoveDataPtpName=DEFAULT; Kuka.VelocityPtp=100; Kuka.VelocityFieldEnabled=True; Kuka.CurrentCDSetIndex=0; Kuka.MovementParameterFieldEnabled=True; IlfCommand=SPTP
            ;ENDFOLD
            SPTP XHOME WITH $VEL_AXIS[1] = SVEL_JOINT(rPTPVelocityStd), $TOOL = STOOL2(FHOME), $BASE = SBASE(FHOME.BASE_NO), $IPO_MODE = SIPO_MODE(FHOME.IPO_FRAME), $LOAD = SLOAD(FHOME.TOOL_NO), $ACC_AXIS[1] = SACC_JOINT(PDEFAULT), $APO = SAPO_PTP(PDEFAULT), $GEAR_JERK[1] = SGEAR_JERK(PDEFAULT), $COLLMON_TOL_PRO[1] = USE_CM_PRO_VALUES(0)
         ;ENDFOLD
         
      ELSE
         HandleDetectionFailure()
         HALT
         CONTINUE
      ENDIF     
      
   ENDLOOP
   
   RC_CLOSECONNECTION(serviceNameDetect[], "req")
END

; Helper function for grasp pose calculation using FCT
DEFFCT BOOL CalculatePointPoseFCT(PointPose:OUT)
   DECL FRAME PointPose
   
   ; Validate input poses
   IF NOT ValidateTagPoseFCT(DETECTEDTAGS[1]) OR NOT ValidateTagPoseFCT(DETECTEDTAGS[2]) THEN
      RETURN FALSE
   ENDIF
   
   ; Calculate midpoint between tags
   PointPose.X = DETECTEDTAGS[1].X + ((DETECTEDTAGS[2].X - DETECTEDTAGS[1].X) / 2)
   PointPose.Y = DETECTEDTAGS[1].Y + ((DETECTEDTAGS[2].Y - DETECTEDTAGS[1].Y) / 2)
   PointPose.Z = DETECTEDTAGS[1].Z + ((DETECTEDTAGS[2].Z - DETECTEDTAGS[1].Z) / 2)
   
   ; Use orientation from first tag
   PointPose.A = DETECTEDTAGS[1].A
   PointPose.B = DETECTEDTAGS[1].B
   PointPose.C = DETECTEDTAGS[1].C
   
   RETURN TRUE
ENDFCT

; Helper function for movement sequence using FCT
DEFFCT BOOL ExecutePointSequenceFCT(PrePointPose:IN, PointPose:IN, serviceNameEstimate[]:IN)
   DECL FRAME PrePointPose, PointPose
   DECL CHAR serviceNameEstimate[]
   DECL EKI_Status RET
   DECL FRAME EstimatedPose
   DECL FRAME CorrectedPointPose, CorrectedPrePointPose
   
   ; Validate input poses
   IF NOT ValidateTagPoseFCT(PrePointPose) OR NOT ValidateTagPoseFCT(PointPose) THEN
      RETURN FALSE
   ENDIF
   
   ; Execute movement sequence with proper tool and load data
   SPTP PrePointPose WITH $VEL_AXIS[1] = SVEL_JOINT(rPTPVelocityStd), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO), $ACC_AXIS[1] = SACC_JOINT(pDatDefault), $APO = SAPO_PTP(pDatDefault), $GEAR_JERK[1] = SGEAR_JERK(pDatDefault)
   
   ; Open connection to the estimate service
   RC_OPENCONNECTION(serviceNameEstimate[])
   
   ; Call estimate robot pose service - this is an empty request
   RET = EKI_Send(serviceNameEstimate[], "req")
   
   RC_WAITFORRESULT(1)
   
   ; Use the function to read estimated pose and calculate correction
   RC_ESTIMATEROBOTPOSE(serviceNameEstimate[], EstimatedPose)
   
   HALT  ; Pause to review estimated pose
   
   RC_CLOSECONNECTION(serviceNameEstimate[], "req")
   
   ; Calculate corrected positions by applying the correction transformation using frame operations
   ; P_corrected = P_target:CorrectionTransformation
   CorrectedPointPose = PointPose:CorrectionTransformation
   CorrectedPrePointPose = PrePointPose:CorrectionTransformation
   
   ; Log the corrected pose
   RC_SETMSG("Moving to corrected target position")
   
   ; Now move to the corrected positions
   SLIN CorrectedPointPose WITH $VEL = SVEL_CP(rLinVelocitySlow), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO), $ACC = SACC_CP(lDatDefault), $ORI_TYPE = SORI_TYP(lDatDefault)
   
   RC_SETMSG("Corrected target position reached. Measure deviation from crosshair. Continue to move home.")
   HALT
   
   SLIN CorrectedPrePointPose WITH $VEL = SVEL_CP(rLinVelocitySlow), $TOOL = STOOL2(fDatDefault), $BASE = SBASE(fDatDefault.BASE_NO), $ACC = SACC_CP(lDatDefault), $ORI_TYPE = SORI_TYP(lDatDefault)
   
   RETURN TRUE
ENDFCT

; Helper function to validate pose
DEFFCT BOOL ValidateTagPoseFCT(Pose:IN)
   DECL FRAME Pose
   
   IF (Pose.X == 0) AND (Pose.Y == 0) AND (Pose.Z == 0) AND (Pose.A == 0) AND (Pose.B == 0) AND (Pose.C == 0) THEN
      RETURN FALSE
   ENDIF
   
   RETURN TRUE
ENDFCT

DEF RC_SETMSG(msg[]:IN)
   DECL CHAR msg[]
   DECL KrlMsgPar_T params[3]
   
   RC_SETMSG_PARAM(msg[], params[])
END

DEF RC_SETMSG_PARAM(msg[]:IN, params:OUT)
   DECL CHAR msg[]
   DECL KrlMsgPar_T params[]
   
   DECL KrlMsg_T name
   DECL KrlMsgOpt_T options
   DECL INT Handle, len, count
   DECL EKrlMsgType Type
   
   name={modul[] "RC", nr 1, msg_txt[] " "}
   
   Type=#notify
   
   len=STRLEN(msg[])
   IF len>0 THEN
      IF len>80 THEN
         len=80
      ENDIF
      FOR count=1 TO len
         name.msg_txt[count]=msg[count]
      ENDFOR
   ELSE
      name.msg_txt[]="parameter msg[] is missing"
   ENDIF
   
   Handle=Set_KrlMsg(Type, name, params[], options)
END

;FOLD RC_INIT
   DEF RC_INIT(configFileName[]:IN)
      DECL CHAR configFileName[]
      DECL EKI_Status RET
      RET=EKI_INIT(configFileName[])
   END
;ENDFOLD (RC_INIT)

;FOLD RC_OPENCONNECTION
   DEF RC_OPENCONNECTION(configFileName[]:IN)
      DECL CHAR configFileName[]
      DECL EKI_STATUS RET
      RET = EKI_Open(configFileName[])
      EKI_CHECK(RET,#quit)    ; This will quit if connection fails
   END
;ENDFOLD (RC_OPENCONNECTION)

;FOLD RC_CLOSECONNECTION
   DEF RC_CLOSECONNECTION(configFileName[]:IN, strPlace[]:IN)
      DECL CHAR configFileName[]
      DECL CHAR strPlace[]
      DECL EKI_Status RET
      WAIT SEC 0
      RET=EKI_Close(configFileName[])
      RET=EKI_ClearBuffer(configFileName[], strPlace[])
   END
;ENDFOLD (RC_CLOSECONNECTION)

;FOLD RC_WAITFORRESULT
   DEF RC_WAITFORRESULT(WaitFlag:IN)
      DECL INT WaitFlag
      
      WAIT FOR $FLAG[WaitFlag] OR NOT $FLAG[RCEkiAliveFlagNo]
      
      ;Eki-connection has been closed 
      IF(NOT $FLAG[RCEkiAliveFlagNo]) THEN
         RC_SETMSG("EKI connection lost")
      ENDIF
      
      $FLAG[WaitFlag] = FALSE
   END
;ENDFOLD (RC_WAITFORRESULT)

;FOLD RC_NOTIFYRECEIVED
   DEF RC_NOTIFYRECEIVED(WAITFLAG:IN, EOFRESULFLAG:IN)
      DECL INT WAITFLAG
      DECL INT EOFRESULFLAG
      $FLAG[EOFRESULFLAG]=FALSE
      $FLAG[WAITFLAG]=TRUE
   END
;ENDFOLD (RC_NOTIFYRECEIVED)

;FOLD ConfigureDetection
   DEF ConfigureDetection(serviceName[]:IN)
      ; Configures detection parameters for AprilTag detection
      ;
      ; @param serviceName[]: EKI configuration/service name
      ;
      DECL CHAR serviceName[]
      DECL EKI_Status RET
      DECL E6POS flangePose
      
      flangePose = $POS_ACT_MES : INV_POS($TOOL)
      
      RET = EKI_SetString(serviceName[], "req/args/pose_frame", "external")
      RET = EKI_SetFrame(serviceName[], "req/args/robot_pose", flangePose)
   END
;ENDFOLD (ConfigureDetection)

;FOLD PerformDetection
   DEF PerformDetection(serviceName[]:IN)
      ; Performs AprilTag detection using configured parameters
      ; and reads the results using RC_READTAGRESULT
      ;
      ; @param serviceName[]: EKI configuration/service name
      ;
      DECL CHAR serviceName[]
      DECL EKI_Status RET
      
      RET = EKI_Send(serviceName[], "req")
      RC_WAITFORRESULT(1)
      RC_READTAGRESULT(serviceName[])
   END
;ENDFOLD (PerformDetection)

;FOLD DetectionSuccessful
   DEFFCT BOOL DetectionSuccessful()
      ; Checks if AprilTag detection was successful
      ;
      ; @return TRUE if tags were detected, FALSE otherwise
      ;
      IF(RETURNCODE.VALUE < 0) THEN
         RETURN FALSE
      ENDIF
      
      IF NUMDETECTEDTAGS > 0 THEN
         RETURN TRUE
      ENDIF
      
      RETURN FALSE
   ENDFCT
;ENDFOLD (DetectionSuccessful)

;FOLD HandleDetectionFailure
   DEF HandleDetectionFailure()
      ; Handles cases where AprilTag detection fails
      ;
      IF(RETURNCODE.VALUE < 0) THEN
         RC_SETMSG("Execution failed")
      ELSE
         RC_SETMSG("No AprilTags detected")
      ENDIF
   END
;ENDFOLD (HandleDetectionFailure)

;FOLD RC_READTAGRESULT
   DEF RC_READTAGRESULT(configFileName[]:IN)
      ; Reads the tag detection results from the EKI buffer with proper error handling.
      ; This function replaces the older RC_READRESULT for AprilTag detection
      ;
      ; @param configFileName[]: EKI configuration/service name
      ;
      DECL CHAR configFileName[]
      DECL CHAR tagId[80]
      DECL RETURNCODE_T RESULT
      DECL EKI_STATUS RET
      DECL INT j
      DECL FRAME POSE
      
      POSE = POSE_IDENT
      tagId[]="-"
      RESULT={VALUE 0, MSG[] "0"}
      
      ; Check if return code exists in buffer before trying to read it
      RET = EKI_CheckBuffer(configFileName[], "res/return_code/@value")
      IF RET.Buff > 0 THEN
         RET = EKI_GetInt(configFileName[], "res/return_code/@value", RESULT.VALUE)
         RET = EKI_GetString(configFileName[], "res/return_code/@message", RESULT.MSG[])
         RETURNCODE = RESULT
      ELSE
         ; Handle the case where return code doesn't exist
         RETURNCODE.VALUE = -1
         RETURNCODE.MSG[] = "No return code in response"
      ENDIF
      
      ; Check if we have any tags
      RET = EKI_CheckBuffer(configFileName[], "res/tags/le/instance_id")
      NUMDETECTEDTAGS = RET.Buff
      
      for j=1 to NUMDETECTEDTAGS
         RET = EKI_GetString(configFileName[], "res/tags/le/id", tagId[])
         
         IF STRCOMP(tagId[], "36h11_1", (#CASE_SENS)) THEN
            RET = EKI_GetFrame(configFileName[], "res/tags/le/pose", POSE)
            DETECTEDTAGS[1] = POSE
         ENDIF
         
         IF STRCOMP(tagId[], "36h11_0", (#CASE_SENS)) THEN
            RET = EKI_GetFrame(configFileName[], "res/tags/le/pose", POSE)
            DETECTEDTAGS[2] = POSE
         ENDIF    
      endfor
      
      RET = EKI_ClearBuffer(configFileName[], "res")
   END
;ENDFOLD (RC_READTAGRESULT)

;FOLD RC_ESTIMATEROBOTPOSE
   DEF RC_ESTIMATEROBOTPOSE(configFileName[]:IN, EstimatedPose:OUT)
      ; Reads robot pose estimation results from the EKI buffer and calculates correction transformation
      ;
      ; @param configFileName[]: EKI configuration/service name
      ; @param EstimatedPose: Output parameter for the actual pose (P_actual) measured by vision
      ;
      DECL CHAR configFileName[]
      DECL FRAME EstimatedPose
      DECL RETURNCODE_T RESULT
      DECL EKI_Status RET
      DECL KrlMsgPar_T par[3]
      DECL FRAME CommandedPose  ; Changed to FRAME type for proper frame operations
      
      EstimatedPose = $NULLFRAME
      RESULT={VALUE 0, MSG[] "0"}
      
      ; Check if return code exists in buffer before trying to read it
      RET = EKI_CheckBuffer(configFileName[], "res/return_code/@value")
      IF RET.Buff > 0 THEN
         RET = EKI_GetInt(configFileName[], "res/return_code/@value", RESULT.VALUE)
         RET = EKI_GetString(configFileName[], "res/return_code/@message", RESULT.MSG[])
         RETURNCODE = RESULT
      ELSE
         ; Handle the case where return code doesn't exist
         RETURNCODE.VALUE = -1
         RETURNCODE.MSG[] = "No return code in response"
      ENDIF
      
      IF(RETURNCODE.VALUE >= 0) THEN
         ; Check if pose exists in buffer before reading it
         RET = EKI_CheckBuffer(configFileName[], "res/pose/@X")
         IF RET.Buff > 0 THEN
            ; Read the pose components individually
            RET = EKI_GetReal(configFileName[], "res/pose/@X", EstimatedPose.X)
            RET = EKI_GetReal(configFileName[], "res/pose/@Y", EstimatedPose.Y)
            RET = EKI_GetReal(configFileName[], "res/pose/@Z", EstimatedPose.Z)
            RET = EKI_GetReal(configFileName[], "res/pose/@A", EstimatedPose.A)
            RET = EKI_GetReal(configFileName[], "res/pose/@B", EstimatedPose.B)
            RET = EKI_GetReal(configFileName[], "res/pose/@C", EstimatedPose.C)
            
            ; Display actual position and orientation (P_actual from vision) in two separate messages
            ; First message for position
            par[1] = {par_type #value, par_real 0}
            par[1].par_real = EstimatedPose.X
            par[2] = {par_type #value, par_real 0}
            par[2].par_real = EstimatedPose.Y
            par[3] = {par_type #value, par_real 0}
            par[3].par_real = EstimatedPose.Z
            RC_SETMSG_PARAM("P_actual Pos: X:%1 Y:%2 Z:%3", par[])
            
            ; Second message for orientation
            par[1].par_real = EstimatedPose.A
            par[2].par_real = EstimatedPose.B
            par[3].par_real = EstimatedPose.C
            RC_SETMSG_PARAM("P_actual Rot: A:%1 B:%2 C:%3", par[])
            
            ; Get commanded tool position (P_cmd - where robot thinks it is)
            CommandedPose = $POS_ACT_MES : INV_POS($TOOL)
            
            ; Display commanded position and orientation in two separate messages
            ; First message for position
            par[1].par_real = CommandedPose.X
            par[2].par_real = CommandedPose.Y
            par[3].par_real = CommandedPose.Z
            RC_SETMSG_PARAM("P_cmd Pos: X:%1 Y:%2 Z:%3", par[])
            
            ; Second message for orientation
            par[1].par_real = CommandedPose.A
            par[2].par_real = CommandedPose.B
            par[3].par_real = CommandedPose.C
            RC_SETMSG_PARAM("P_cmd Rot: A:%1 B:%2 C:%3", par[])
            
            ; Calculate correction transformation using proper frame operations
            ; T_correction maps from P_actual to P_cmd: P_cmd = P_actual:T_correction
            ; So T_correction = P_actual⁻¹:P_cmd = INV(P_actual):P_cmd
            CorrectionTransformation = EstimatedPose:CommandedPose
            
            ; Display the correction frame values
            par[1].par_real = CorrectionTransformation.X
            par[2].par_real = CorrectionTransformation.Y
            par[3].par_real = CorrectionTransformation.Z
            RC_SETMSG_PARAM("Correction Pos: X:%1 Y:%2 Z:%3", par[])
            
            par[1].par_real = CorrectionTransformation.A
            par[2].par_real = CorrectionTransformation.B
            par[3].par_real = CorrectionTransformation.C
            RC_SETMSG_PARAM("Correction Rot: A:%1 B:%2 C:%3", par[])
            
            RC_SETMSG("Correction transformation calculated and stored. Ready to apply to movements.")
         ELSE
            RC_SETMSG("No pose data found in response")
         ENDIF
      ENDIF
      
      RET = EKI_ClearBuffer(configFileName[], "res")
   END
;ENDFOLD (RC_ESTIMATEROBOTPOSE)
